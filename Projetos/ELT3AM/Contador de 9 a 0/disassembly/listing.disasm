Disassembly Listing for Contador de 9 a 0
Generated From:
Z:/MPLAB XC8/Projetos/ELT3AM/Contador de 9 a 0/dist/default/production/Contador_de_9_a_0.production.elf
31/08/2016 07:23:31

---  Z:/MPLAB XC8/Projetos/ELT3AM/Contador de 9 a 0/Teclado.c  ------------------------------------------
1:             /* 
2:              * Arquivo: Teclado.c
3:              * Autor:   JABNeto
4:              * Versao:  150710
5:              */
6:             
7:             
8:             #include "Teclado.h"
9:             
10:            
11:            //Alocação de memória para o módulo -------------------------------------------
12:            #if (TECLADO_FUNCOES_ESTENDIDAS == _SIM)
13:                _Ctrl_Teclado       Ctrl_Teclado;
14:            #endif
15:            
16:            
17:            
18:            //Funções locais do módulo ----------------------------------------------------
19:            
20:            
21:            
22:            
23:            //Funções públicas do módulo --------------------------------------------------
24:            void Teclado_Inicializacao (void)
25:            {
26:                ANSELA = 0;
10DC  0E00     MOVLW 0x0
10DE  010F     MOVLB 0xF
10E0  6F38     MOVWF 0x38, BANKED
27:                
28:                #if (TECLADO_FUNCOES_ESTENDIDAS == _SIM)
29:                    Ctrl_Teclado.Controle.Valor = 0;
30:                    Ctrl_Teclado.Eventos.Valor = 0;
31:                #endif
32:            }
10E2  0012     RETURN 0
10E4  6E01     MOVWF __pcstackCOMRAM, ACCESS
33:            
34:            
35:            #if (TECLADO_FUNCOES_ESTENDIDAS == _SIM)
36:            /*
37:             * Teclado_Monitor
38:             * Faz o monitoramento do teclado no modo estendido
39:             */
40:            void Teclado_Monitor(void)
41:            {
42:                #if (TECLADO_MODO_DE_CAPTURA == _DIRETO)
43:                {
44:                    if (_S1 == _PRESSIONADA) Ctrl_Teclado.Eventos.S1 = _SIM;
45:                    if (_S2 == _PRESSIONADA) Ctrl_Teclado.Eventos.S2 = _SIM;
46:                    if (_S3 == _PRESSIONADA) Ctrl_Teclado.Eventos.S3 = _SIM;
47:                    if (_S4 == _PRESSIONADA) Ctrl_Teclado.Eventos.S4 = _SIM;
48:                    if (_S5 == _PRESSIONADA) Ctrl_Teclado.Eventos.S5 = _SIM;        
49:                }
50:                #else
51:                {
52:                    if ((PORTA | 0b11000100) == 0xFF) Ctrl_Teclado.Controle.Recuo = _SIM;
53:                    else
54:                    {
55:                        if (Ctrl_Teclado.Controle.Recuo == _SIM)
56:                        {
57:                            Ctrl_Teclado.Controle.Recuo = _NAO;
58:                            
59:                            if (_S1 == _PRESSIONADA) Ctrl_Teclado.Eventos.S1 = _SIM;
60:                            else if (_S2 == _PRESSIONADA) Ctrl_Teclado.Eventos.S2 = _SIM;
61:                            else if (_S3 == _PRESSIONADA) Ctrl_Teclado.Eventos.S3 = _SIM;              
62:                            else if (_S4 == _PRESSIONADA) Ctrl_Teclado.Eventos.S4 = _SIM;                
63:                            else if (_S5 == _PRESSIONADA) Ctrl_Teclado.Eventos.S5 = _SIM;                
64:                        }
65:                    }
66:                }
67:                #endif
68:            }
69:            
70:            /*
71:             * Tecla_Pressionada
72:             * Detecta se existe evento para a tecla fornecida
73:             * Retorno:
74:             * _NAO (0): Não existe evento de tecla pressionda para a tecla fornecida
75:             * _SIM (1): Existe evento de tecla pressionda para a tecla fornecida
76:             * 
77:             * Tecla: corresponde ao numero da tecla que se deseja detectar a existencia
78:             * do evento. (1,2,3,4 ou 5). O evento é removido após a detecção e, somente
79:             * para a tecla em teste.
80:             * 
81:             * Ex de aplicação. if (Tecla_pressionada(1) == _SIM)
82:             */
83:            Uchar Tecla_Pressionada (Uchar Tecla)
84:            {
85:                Uchar Retorno= _NAO;
86:            
87:                switch (Tecla)
88:                {
89:                    case 1:
90:                        if (Ctrl_Teclado.Eventos.S1 == _SIM)
91:                        {
92:                            Ctrl_Teclado.Eventos.S1 = _NAO;
93:                            Retorno = _SIM;
94:                        }
95:                        break;
96:            
97:                    case 2:
98:                        if (Ctrl_Teclado.Eventos.S2 == _SIM)
99:                        {
100:                           Ctrl_Teclado.Eventos.S2 = _NAO;
101:                           Retorno = _SIM;
102:                       }
103:                       break;
104:           
105:                   case 3:
106:                       if (Ctrl_Teclado.Eventos.S3 == _SIM)
107:                       {
108:                           Ctrl_Teclado.Eventos.S3 = _NAO;
109:                           Retorno = _SIM;
110:                       }
111:                       break;
112:           
113:                   case 4:
114:                       if (Ctrl_Teclado.Eventos.S4 == _SIM)
115:                       {
116:                           Ctrl_Teclado.Eventos.S4 = _NAO;
117:                           Retorno = _SIM;
118:                       }
119:                       break;
120:                       
121:                   case 5:
122:                       if (Ctrl_Teclado.Eventos.S5 == _SIM)
123:                       {
124:                           Ctrl_Teclado.Eventos.S5 = _NAO;
125:                           Retorno = _SIM;
126:                       }
127:               }
128:           
129:               return Retorno;
130:           }
131:           
132:           #endif
133:           
134:           
135:           
136:           
---  Z:/MPLAB XC8/Projetos/ELT3AM/Contador de 9 a 0/Oscilador.c  ----------------------------------------
1:             /* 
2:              * Arquivo: Oscilador.c
3:              * Autor:   JABNeto
4:              * Data:    17/08/2015
5:              */
6:             
7:             #include <xc.h>
8:             #include "Oscilador.h"
9:             
10:            
11:            #if (_SISTEMA_USA_OSCILADOR_PRIMARIO == _SIM)
12:            #pragma config FOSC = _OSC_PRIMARIO_TIPO
13:            #else
14:            #pragma config FOSC = _OSC_INTERNO_TIPO
15:            #endif
16:            
17:            #pragma config FCMEN = OFF
18:            #pragma config IESO = OFF
19:            
20:            //Alocação de memória para o módulo -------------------------------------------
21:            
22:            
23:            
24:            
25:            //Funções do módulo -----------------------------------------------------------
26:            
27:            /*
28:             * Oscilador_Inicializacao
29:             * 
30:             * Faz a inicialização do módulo oscilador. Essa função deve ser chamadada
31:             * na inicialização do sistema.
32:             */
33:            void Oscilador_Inicializacao (void)
34:            {
35:                OSCCONbits.SCS = 0;
10CC  0EFC     MOVLW 0xFC
10CE  16D3     ANDWF OSCCON, F, ACCESS
36:                
37:            #if(_OSC_INTERNO_FREQUENCIA == _HF_16MHz)
38:                OSCCONbits.IRCF = 7;
39:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_8MHz)
40:                OSCCONbits.IRCF = 6;
10D0  50D3     MOVF OSCCON, W, ACCESS
10D2  0B8F     ANDLW 0x8F
10D4  0960     IORLW 0x60
10D6  6ED3     MOVWF OSCCON, ACCESS
41:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_4MHz)
42:                OSCCONbits.IRCF = 5;
43:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_2MHz)
44:                OSCCONbits.IRCF = 4;    
45:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_1MHz)
46:                OSCCONbits.IRCF = 3;
47:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_500KHz)
48:                OSCCONbits.IRCF = 2;       
49:                OSCTUNEbits.INTSRC = 1; 
50:                OSCCON2bits.MFIOSEL = 0;
51:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_250KHz)
52:                OSCCONbits.IRCF = 1;       
53:                OSCTUNEbits.INTSRC = 1; 
54:                OSCCON2bits.MFIOSEL = 0;     
55:            #elif (_OSC_INTERNO_FREQUENCIA == _HF_31KHz)
56:                OSCCONbits.IRCF = 0;       
57:                OSCTUNEbits.INTSRC = 1; 
58:                OSCCON2bits.MFIOSEL = 0;   
59:            #elif (_OSC_INTERNO_FREQUENCIA == _MF_500KHz)
60:                OSCCONbits.IRCF = 2;       
61:                OSCTUNEbits.INTSRC = 1; 
62:                OSCCON2bits.MFIOSEL = 1; 
63:            #elif (_OSC_INTERNO_FREQUENCIA == _MF_250KHz)
64:                OSCCONbits.IRCF = 1;       
65:                OSCTUNEbits.INTSRC = 1; 
66:                OSCCON2bits.MFIOSEL = 1;  
67:            #elif (_OSC_INTERNO_FREQUENCIA == _MF_31KHz)
68:                OSCCONbits.IRCF = 0;       
69:                OSCTUNEbits.INTSRC = 1; 
70:                OSCCON2bits.MFIOSEL = 1;    
71:            #elif (_OSC_INTERNO_FREQUENCIA == _LF_31KHz)
72:                OSCCONbits.IRCF = 0;       
73:                OSCTUNEbits.INTSRC = 0; 
74:                OSCCON2bits.MFIOSEL = 1;       
75:            #endif
76:                
77:                
78:            #if (_OSC_PRIMARIO_PLL_ATIVADO == _SIM)
79:                OSCTUNEbits.PLLEN= 1; 
10D8  8C9B     BSF OSCTUNE, 6, ACCESS
80:            #else
81:                OSCTUNEbits.PLLEN= 0; 
82:            #endif    
83:            }
10DA  0012     RETURN 0
10DC  0E00     MOVLW 0x0
84:            
85:            
86:            
87:            
88:            
89:            
90:            
91:            
92:            
93:            
94:            
95:            
---  Z:/MPLAB XC8/Projetos/ELT3AM/Contador de 9 a 0/Display de Leds.c  ----------------------------------
1:             /* 
2:              * Arquivo: Display de Leds.C
3:              * Autor:   JABNeto
4:              * Data:    17/08/2015
5:              */
6:             
7:             #include <xc.h>
8:             #include "Definicoes Gerais.h"
9:             #include "Display de Leds.h"
10:            
11:            
12:            //Alocação de memória para o módulo -------------------------------------------
13:            
14:            
15:            
16:            
17:            //Funções locais do módulo ----------------------------------------------------
18:            
19:            
20:            
21:            
22:            //Funções públicas do módulo --------------------------------------------------
23:            
24:            /*
25:             * Display_Inicializacao
26:             * Faz a inicialização do display. Essa função deve ser chamada antes da
27:             * utilização das demais funções do módulo.
28:             */
29:            void Display_Inicializacao (void)
30:            {
31:                //Latch (OE) - Pino RD3 do uC
32:                ANSELDbits.ANSD3 = 0;    
1056  010F     MOVLB 0xF
1058  973B     BCF 0x3B, 3, BANKED
33:                LATDbits.LATD3 = 1;    
105A  868C     BSF LATD, 3, ACCESS
34:                TRISDbits.TRISD3 = 0;     
105C  9695     BCF TRISD, 3, ACCESS
35:            
36:                //Latch (CLK) - Pino RD2 do uC 
37:                ANSELDbits.ANSD2 = 0;      
105E  010F     MOVLB 0xF
1060  953B     BCF 0x3B, 2, BANKED
38:                LATDbits.LATD2 = 0;    
1062  948C     BCF LATD, 2, ACCESS
39:                TRISDbits.TRISD2 = 0;     
1064  9495     BCF TRISD, 2, ACCESS
40:              
41:                //PORTB
42:                ANSELB = 0;
1066  0E00     MOVLW 0x0
1068  010F     MOVLB 0xF
106A  6F39     MOVWF 0x39, BANKED
43:                LATB = 0;
106C  0E00     MOVLW 0x0
106E  6E8A     MOVWF LATB, ACCESS
44:                TRISB = 0;
1070  0E00     MOVLW 0x0
1072  6E93     MOVWF TRISB, ACCESS
45:                
46:                //Inicialização do digito
47:                Display_LigaDigito (0,0);
1074  0E00     MOVLW 0x0
1076  6E01     MOVWF __pcstackCOMRAM, ACCESS
1078  0E00     MOVLW 0x0
107A  EC52     CALL 0x10A4, 0
107C  F008     NOP
48:            }
107E  0012     RETURN 0
49:            
50:            
51:            /*
52:             * Display_LigaDigito
53:             * Liga o transistor de controle de um dos displays ou Leds, e escreve o
54:             * codigo do caractere fornecido.
55:             * 
56:             * CodigoDoDigito: código que liga o digito desejado.
57:             *                 Ex. _Leds, _Digito1, _Digito2 ... 
58:             * Caractere: Código de 7 segmentos para a excitação dos segmentos do display.
59:             *                 Ex. _0, _4, _Sa ... 
60:             */
61:            void Display_LigaDigito (Uchar CodigoDoDigito,Uchar Caractere)
10A4  6E02     MOVWF CodigoDoDigito, ACCESS
62:            {
63:                LATDbits.LATD3 = 1;
10A6  868C     BSF LATD, 3, ACCESS
64:                
65:                LATB = CodigoDoDigito;
10A8  C002     MOVFF CodigoDoDigito, LATB
10AA  FF8A     NOP
66:                LATDbits.LATD2 = 1;
10AC  848C     BSF LATD, 2, ACCESS
67:                NOP();
10AE  F000     NOP
68:                NOP();
10B0  F000     NOP
69:                LATDbits.LATD2 = 0;
10B2  948C     BCF LATD, 2, ACCESS
70:              
71:                LATB = Caractere;
10B4  C001     MOVFF __pcstackCOMRAM, LATB
10B6  FF8A     NOP
72:                LATDbits.LATD3 = 0;
10B8  968C     BCF LATD, 3, ACCESS
73:            }
10BA  0012     RETURN 0
74:            
75:            /*
76:             * Display_ExibeCaractere
77:             * Escreve caractere fornecido no display ou leds. O digito deve estar ligado
78:             * para que o caractere seja exibido
79:             */
80:            void Display_ExibeCaractere (Uchar Caractere)
10E4  6E01     MOVWF __pcstackCOMRAM, ACCESS
81:            {
82:                LATB = Caractere;    
10E6  C001     MOVFF __pcstackCOMRAM, LATB
10E8  FF8A     NOP
83:            }
10EA  0012     RETURN 0
10EC  FFFF     NOP
---  Z:/MPLAB XC8/Projetos/ELT3AM/Contador de 9 a 0/App.c  ----------------------------------------------
1:             /*
2:              * File:   App.c
3:              * Author: jose_010573
4:              *
5:              * Created on 1 de Junho de 2016, 07:40
6:              */
7:             
8:             
9:             #include <xc.h>
10:            
11:            #include "Display de Leds.h"
12:            #include "Teclado.h"
13:            #include "Oscilador.h"
14:            
15:            
16:            //Alocação de memória
17:            signed char Contador;
18:            _Codigo7segmentos;
19:            
20:            void Atrasos_ms (unsigned int Tempo)
21:            {
22:                while (Tempo-- > 0)
1080  D008     BRA 0x1092
1092  0601     DECF __pcstackCOMRAM, F, ACCESS
1094  A0D8     BTFSS STATUS, 0, ACCESS
23:                {
24:                    __delay_ms(1);
1082  0E0B     MOVLW 0xB
1084  6E03     MOVWF 0x3, ACCESS
1086  0E62     MOVLW 0x62
1088  2EE8     DECFSZ WREG, F, ACCESS
108A  D7FE     BRA 0x1088
108C  2E03     DECFSZ 0x3, F, ACCESS
108E  D7FC     BRA 0x1088
1090  D000     BRA 0x1092
1092  0601     DECF __pcstackCOMRAM, F, ACCESS
1094  A0D8     BTFSS STATUS, 0, ACCESS
1096  0602     DECF CodigoDoDigito, F, ACCESS
1098  2801     INCF __pcstackCOMRAM, W, ACCESS
109A  E1F3     BNZ 0x1082
109C  2802     INCF CodigoDoDigito, W, ACCESS
109E  B4D8     BTFSC STATUS, 2, ACCESS
10A0  0012     RETURN 0
10A2  D7EF     BRA 0x1082
25:                }
26:            }
27:            
28:            void main(void)
29:            {
30:                Oscilador_Inicializacao();
100C  EC66     CALL 0x10CC, 0
100E  F008     NOP
31:                Display_Inicializacao();
1010  EC2B     CALL 0x1056, 0
1012  F008     NOP
32:                Teclado_Inicializacao();
1014  EC6E     CALL 0x10DC, 0
1016  F008     NOP
33:                Display_LigaDigito(_Digito6,_br);
1018  0E00     MOVLW 0x0
101A  6E01     MOVWF __pcstackCOMRAM, ACCESS
101C  0E20     MOVLW 0x20
101E  EC52     CALL 0x10A4, 0
1020  F008     NOP
34:                
35:                Contador = 9;
1022  D016     BRA 0x1050
36:                
37:                while (1)
1054  D7E7     BRA 0x1024
38:                {
39:                  Display_ExibeCaractere(Codigo7segmentos[Contador]);  
1024  5004     MOVF Contador, W, ACCESS
1026  0D01     MULLW 0x1
1028  0E01     MOVLW 0x1
102A  24F3     ADDWF PROD, W, ACCESS
102C  6EF6     MOVWF TBLPTR, ACCESS
102E  0E10     MOVLW 0x10
1030  20F4     ADDWFC PRODH, W, ACCESS
1032  6EF7     MOVWF TBLPTRH, ACCESS
1034  0008     TBLRD*
1036  50F5     MOVF TABLAT, W, ACCESS
1038  EC72     CALL 0x10E4, 0
103A  F008     NOP
40:                 
41:                  Atrasos_ms(1000);
103C  0E03     MOVLW 0x3
103E  6E02     MOVWF CodigoDoDigito, ACCESS
1040  0EE8     MOVLW 0xE8
1042  6E01     MOVWF __pcstackCOMRAM, ACCESS
1044  EC40     CALL 0x1080, 0
1046  F008     NOP
42:                  
43:                  Contador--;
1048  0604     DECF Contador, F, ACCESS
44:                  
45:                  if (Contador == -1) Contador = 9;
104A  2804     INCF Contador, W, ACCESS
104C  A4D8     BTFSS STATUS, 2, ACCESS
104E  D7EA     BRA 0x1024
1050  0E09     MOVLW 0x9
1052  6E04     MOVWF Contador, ACCESS
1054  D7E7     BRA 0x1024
46:                }
47:            }
